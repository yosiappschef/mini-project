//
//  ProjectListInteractor.swift
//  sampleCRUD
//
//  Created by syndromme on 24/10/20.
//  Copyright (c) 2020 ___ORGANIZATIONNAME___. All rights reserved.
//
//  This file was generated by the Clean Swift Xcode Templates so
//  you can apply clean architecture to your iOS and Mac projects,
//  see http://clean-swift.com
//

import UIKit

protocol ProjectListBusinessLogic
{
  func getProjectList(page: Int, name: String, size: Int)
  func deleteProject()
  func setSelectedProject(project: ProjectList.Project?)
}

protocol ProjectListDataStore
{
  var selectedProject: ProjectList.Project? { get set }
  var sorts: [String]? { get set }
}

class ProjectListInteractor: ProjectListBusinessLogic, ProjectListDataStore
{
  var presenter: ProjectListPresentationLogic?
  var worker: ProjectListWorker?
  var selectedProject: ProjectList.Project?
  var sorts: [String]?
  
  func getProjectList(page: Int = 1, name: String = "", size: Int = Constant.paginateSize) {
    worker = ProjectListWorker()
    let request = ProjectList.Request(page: page, size: size, name: name, sort: self.sorts)
    worker?.doProjectList(request: request).subscribe(onSuccess: { (results) in
      self.presenter?.presentProjects(projectResponse: results)
    }, onError: { (error) in
      
    }).disposed(by: disposeBag)
  }
  
  func deleteProject() {
    worker = ProjectListWorker()
    worker?.doDeleteProject(id: "\(selectedProject?.id ?? 0)").subscribe(onCompleted: {
      self.getProjectList(page: 0)
      self.presenter?.presentSuccessDelete()
    }, onError: { (error) in
      
    }).disposed(by: disposeBag)
  }
  
  func setSelectedProject(project: ProjectList.Project?) {
    selectedProject = project
  }
}
