//
//  CreateDepartmentViewController.swift
//  sampleCRUD
//
//  Created by syndromme on 22/10/20.
//  Copyright (c) 2020 ___ORGANIZATIONNAME___. All rights reserved.
//
//  This file was generated by the Clean Swift Xcode Templates so
//  you can apply clean architecture to your iOS and Mac projects,
//  see http://clean-swift.com
//

import UIKit

protocol CreateDepartmentDisplayLogic: class
{
  func displaySuccessCreate(department: Main.Department)
  func displaySuccessUpdate(department: Main.Department)
  func displaySuccessDrafted(department: Department)
  func displaySuccessUpdateDraft(department: Department)
  func displayFailed(message: String)
}

class CreateDepartmentViewController: UIViewController, CreateDepartmentDisplayLogic
{
  var interactor: CreateDepartmentBusinessLogic?
  var router: (NSObjectProtocol & CreateDepartmentRoutingLogic & CreateDepartmentDataPassing)?

  // MARK: Object lifecycle
  
  override init(nibName nibNameOrNil: String?, bundle nibBundleOrNil: Bundle?)
  {
    super.init(nibName: nibNameOrNil, bundle: nibBundleOrNil)
    setup()
  }
  
  required init?(coder aDecoder: NSCoder)
  {
    super.init(coder: aDecoder)
    setup()
  }
  
  // MARK: Setup
  
  private func setup()
  {
    let viewController = self
    let interactor = CreateDepartmentInteractor()
    let presenter = CreateDepartmentPresenter()
    let router = CreateDepartmentRouter()
    viewController.interactor = interactor
    viewController.router = router
    interactor.presenter = presenter
    presenter.viewController = viewController
    router.viewController = viewController
    router.dataStore = interactor
  }
  
  // MARK: Routing
  
  override func prepare(for segue: UIStoryboardSegue, sender: Any?)
  {
    if let scene = segue.identifier {
      let selector = NSSelectorFromString("routeTo\(scene)WithSegue:")
      if let router = router, router.responds(to: selector) {
        router.perform(selector, with: segue)
      }
    }
  }
  
  // MARK: View lifecycle
  @IBOutlet weak var mainStack: UIStackView!
  
  lazy var nameInput: InputFieldView = {
    let v = InputFieldView.nib(withType: InputFieldView.self)
    v.titleLabel.text = "Name"
    return v
  }()
  lazy var groupNameInput: InputFieldView = {
    let v = InputFieldView.nib(withType: InputFieldView.self)
    v.titleLabel.text = "Group Name"
    return v
  }()
  lazy var inTimeInput: InputFieldView = {
    let v = InputFieldView.nib(withType: InputFieldView.self)
    v.titleLabel.text = "In Time"
    v.inputField.tag = 3
    v.inputField.delegate = self
    return v
  }()
  lazy var outTimeInput: InputFieldView = {
    let v = InputFieldView.nib(withType: InputFieldView.self)
    v.titleLabel.text = "Out Time"
    v.inputField.tag = 4
    v.inputField.delegate = self
    return v
  }()
  lazy var sinceInput: InputFieldView = {
    let v = InputFieldView.nib(withType: InputFieldView.self)
    v.titleLabel.text = "Since Input"
    v.inputField.tag = 5
    v.inputField.delegate = self
  return v
  }()
  
  lazy var saveButton = UIBarButtonItem(title: "Save", style: .plain, target: self, action: #selector(saveAction(_:)))
  lazy var draftButton = UIBarButtonItem(title: "Draft", style: .plain, target: self, action: #selector(draftAction(_:)))
  
  private var inTime: Date?
  private var outTime: Date?
  private var since: Date?
  private var dateSelection: CreateDepartment.DateSelection?
  
  private final var selectedDepartment: Main.Department? {
    return self.router?.dataStore?.selectedDepartment
  }
  
  override func viewDidLoad()
  {
    super.viewDidLoad()
    setupNav()
    setupLayout()
    setupSelectedDepartment()
  }
  
//  MARK: Setup
  func setupLayout() {
    mainStack.addArrangedSubview(nameInput)
    mainStack.addArrangedSubview(groupNameInput)
    mainStack.addArrangedSubview(inTimeInput)
    mainStack.addArrangedSubview(outTimeInput)
    mainStack.addArrangedSubview(sinceInput)
  }
  
  func setupNav() {
    title = "CREATE DEPARTMENT"
    navigationItem.rightBarButtonItems = [saveButton, draftButton]
  }
  
  func setupSelectedDepartment() {
    if selectedDepartment != nil {
      nameInput.inputField.text = selectedDepartment?.name
      groupNameInput.inputField.text = selectedDepartment?.groupName
      inTime = selectedDepartment?.inTime.dateWithFormat("HH:mm:ss", timezone: .current)
      outTime = selectedDepartment?.outTime.dateWithFormat("HH:mm:ss", timezone: .current)
      since = selectedDepartment?.since.dateWithFormat("YYYY-MM-dd", timezone: .current)
      inTimeInput.inputField.text = inTime?.stringWithFormat("HH:mm:ss", timezone: TimeZone.current)
      outTimeInput.inputField.text = outTime?.stringWithFormat("HH:mm:ss", timezone: TimeZone.current)
      sinceInput.inputField.text = since?.stringWithFormat("dd MMM YYYY", timezone: TimeZone.current)
    }
  }
  
//  MARK: Display
  func displaySuccessCreate(department: Main.Department) {
    let okAction = UIAlertAction(title: "OK", style: .default) { _ in
      self.navigationController?.popViewController(animated: true)
    }
    showAlert(title: "Department", message: "Your \(department.name) has been created.", actions: [okAction])
  }
  
  func displaySuccessUpdate(department: Main.Department) {
    let okAction = UIAlertAction(title: "OK", style: .default) { _ in
      self.navigationController?.popViewController(animated: true)
    }
    showAlert(title: "Department", message: "Your \(department.name) has been updated.", actions: [okAction])
  }
  
  func displaySuccessDrafted(department: Department) {
    let okAction = UIAlertAction(title: "OK", style: .default) { _ in
      self.navigationController?.popViewController(animated: true)
    }
    showAlert(title: "Department", message: "Your \(department.name ?? "") has been drafted.", actions: [okAction])
  }
  
  func displaySuccessUpdateDraft(department: Department) {
    let okAction = UIAlertAction(title: "OK", style: .default) { _ in
      self.navigationController?.popViewController(animated: true)
    }
    showAlert(title: "Department", message: "Your \(department.name ?? "") has been updated.", actions: [okAction])
  }
  
  func displayFailed(message: String) {
    showAlert(title: "Department Failed", message: message)
  }
  
//  MARK: Action
  @IBAction func saveAction(_ sender: Any) {
    if validInput() {
      if selectedDepartment == nil || router?.dataStore?.draftDepartment != nil {
        interactor?.createNewDepartment(name: nameInput.inputField.text ?? "",
                                        groupName: groupNameInput.inputField.text ?? "",
                                        inTime: inTime?.stringWithFormat("HH:mm:ss", timezone: .current) ?? "",
                                        outTime: outTime?.stringWithFormat("HH:mm:ss", timezone: .current) ?? "",
                                        since: since?.stringWithFormat("YYYY-MM-dd", timezone: .current) ?? "")
      } else {
        interactor?.updateDepartment(id: "\(selectedDepartment?.id ?? 0)",
                                     name: nameInput.inputField.text ?? "",
                                     groupName: groupNameInput.inputField.text ?? "",
                                     inTime: inTime?.stringWithFormat("HH:mm:ss", timezone: .current) ?? "",
                                     outTime: outTime?.stringWithFormat("HH:mm:ss", timezone: .current) ?? "",
                                     since: since?.stringWithFormat("YYYY-MM-dd", timezone: .current) ?? "")
      }
    }
  }
  
  @IBAction func draftAction(_ sender: Any) {
    interactor?.saveAsDraft(name: nameInput.inputField.text ?? "",
                            groupName: groupNameInput.inputField.text ?? "",
                            inTime: inTime?.stringWithFormat("HH:mm:ss", timezone: .current) ?? "",
                            outTime: outTime?.stringWithFormat("HH:mm:ss", timezone: .current) ?? "",
                            since: since?.stringWithFormat("YYYY-MM-dd", timezone: .current) ?? "")
  }
  
  @IBAction func doneDatePicker(_ sender: Any) {
    let date = sender as? Date ?? Date()
    switch dateSelection {
    case .Intime:
      inTime = date
      inTimeInput.inputField.text = date.stringWithFormat("HH:mm:ss", timezone: TimeZone.current)
      inTimeInput.inputField.endEditing(true)
      break
    case .Outtime:
      outTime = date
      outTimeInput.inputField.text = date.stringWithFormat("HH:mm:ss", timezone: TimeZone.current)
      outTimeInput.inputField.endEditing(true)
      break
    case .Since:
      since = date
      sinceInput.inputField.text = date.stringWithFormat("dd MMM YYYY", timezone: TimeZone.current)
      sinceInput.inputField.endEditing(true)
      break
    default:
      break
    }
    
  }
  
  @IBAction func cancelDatePicker(_ sender: Any) {
    
  }
  
//  MARK: Custom
  func validInput() -> Bool {
    nameInput.clearError()
    groupNameInput.clearError()
    inTimeInput.clearError()
    outTimeInput.clearError()
    sinceInput.clearError()
    
    if nameInput.inputField.text!.isEmpty {
      nameInput.errorLabel.text = "This field is required!"
      return false
    }
    if groupNameInput.inputField.text!.isEmpty {
      groupNameInput.errorLabel.text = "This field is required!"
      return false
    }
    if inTimeInput.inputField.text!.isEmpty {
      inTimeInput.errorLabel.text = "This field is required!"
      return false
    }
    if outTimeInput.inputField.text!.isEmpty {
      outTimeInput.errorLabel.text = "This field is required!"
      return false
    }
    if sinceInput.inputField.text!.isEmpty {
      sinceInput.errorLabel.text = "This field is required!"
      return false
    }
    
    return true
  }
}

extension CreateDepartmentViewController: UITextFieldDelegate {
  func textFieldShouldBeginEditing(_ textField: UITextField) -> Bool {
    var title = ""
    var selectedDate: Date?
    var pickerMode: UIDatePicker.Mode = .time
    switch textField.tag {
    case 3:
      title = "Input In Time"
      selectedDate = inTime
      dateSelection = .Intime
      break
    case 4:
      title = "Input Out Time"
      selectedDate = outTime
      dateSelection = .Outtime
      break
    case 5:
      title = "Input Since"
      selectedDate = since
      dateSelection = .Since
      pickerMode = .date
      break
    default:
      break
    }
    showDatePicker(title: title,
                   pickerMode: pickerMode,
                   selectedDate: selectedDate ?? Date(),
                   minimumDate: Calendar.current.date(byAdding: .year, value: -100, to: Date()) ?? Date(),
                   maximumDate: Calendar.current.date(byAdding: .year, value: 100, to: Date()) ?? Date(),
                   action: #selector(doneDatePicker(_:)),
                   cancel: #selector(cancelDatePicker(_:)))
    return false
  }
}
