//
//  MainViewController.swift
//  sampleCRUD
//
//  Created by syndromme on 22/10/20.
//  Copyright (c) 2020 ___ORGANIZATIONNAME___. All rights reserved.
//
//  This file was generated by the Clean Swift Xcode Templates so
//  you can apply clean architecture to your iOS and Mac projects,
//  see http://clean-swift.com
//

import UIKit
import RxSwift
import RxCocoa

protocol MainDisplayLogic: class
{
  func displayDepartment(departmentResponse: Main.DepartmentResponse)
  func displaySuccessDelete()
}

class MainViewController: UIViewController, MainDisplayLogic
{
  var interactor: MainBusinessLogic?
  var router: (NSObjectProtocol & MainRoutingLogic & MainDataPassing)?

  // MARK: Object lifecycle
  
  override init(nibName nibNameOrNil: String?, bundle nibBundleOrNil: Bundle?)
  {
    super.init(nibName: nibNameOrNil, bundle: nibBundleOrNil)
    setup()
  }
  
  required init?(coder aDecoder: NSCoder)
  {
    super.init(coder: aDecoder)
    setup()
  }
  
  // MARK: Setup
  
  private func setup()
  {
    let viewController = self
    let interactor = MainInteractor()
    let presenter = MainPresenter()
    let router = MainRouter()
    viewController.interactor = interactor
    viewController.router = router
    interactor.presenter = presenter
    presenter.viewController = viewController
    router.viewController = viewController
    router.dataStore = interactor
  }
  
  // MARK: Routing
  
  override func prepare(for segue: UIStoryboardSegue, sender: Any?)
  {
    if let scene = segue.identifier {
      let selector = NSSelectorFromString("routeTo\(scene)WithSegue:")
      if let router = router, router.responds(to: selector) {
        router.perform(selector, with: segue)
      }
    }
  }
  
  // MARK: View lifecycle
  @IBOutlet weak var tableView: UITableView!
  
  lazy var saveButton = UIBarButtonItem(title: "New", style: .plain, target: self, action: #selector(newAction(_:)))
  lazy var draftsButton = UIBarButtonItem(title: "Drafts", style: .plain, target: self, action: #selector(draftsAction(_:)))
  lazy var sortButton = UIBarButtonItem(title: "Sort", style: .plain, target: self, action: #selector(sortAction(_:)))
  lazy var logoutButton = UIBarButtonItem(title: "Logout", style: .plain, target: self, action: #selector(logoutAction(_:)))
  
  private var resultSearchController: UISearchController = {
    let controller = UISearchController(searchResultsController: nil)
    controller.dimsBackgroundDuringPresentation = false
    controller.searchBar.sizeToFit()
    return controller
  }()
  
  private var response: Main.DepartmentResponse?
  var departments = [Main.Department]()
  var workItem: DispatchWorkItem?
  
  override func viewDidLoad()
  {
    super.viewDidLoad()
    setupNav()
    setupTable()
  }
  
  override func viewWillAppear(_ animated: Bool) {
    super.viewWillAppear(animated)
    departments.removeAll()
    tableView.reloadData()
    interactor?.getDepartmentList(page: 0, query: "", size: Constant.paginateSize)
  }
  
//  MARK: Setup
  func setupTable() {
    tableView.dataSource = self
    tableView.delegate = self
    tableView.separatorInset = .zero
    tableView.tableFooterView = UIView()
    
    resultSearchController.searchResultsUpdater = self
    tableView.tableHeaderView = resultSearchController.searchBar
  }
  
  func setupNav() {
    title = "DEPARTMENTS"
//    navigationItem.leftBarButtonItems = [logoutButton, sortButton]
    navigationItem.rightBarButtonItems = [saveButton, draftsButton, sortButton]
  }
  
//  MARK: Display
  func displayDepartment(departmentResponse: Main.DepartmentResponse) {
    self.response = departmentResponse
//    self.departments = departmentResponse.content
    self.departments.append(contentsOf: departmentResponse.content)
    tableView.reloadData()
  }
  
  func displaySuccessDelete() {
    showAlert(title: "Department", message: "Your department has been deleted.")
  }
  
//  MARK: Action
  @IBAction func newAction(_ sender: Any) {
    interactor?.setSelectedDepartment(department: nil)
    router?.routeToCreateDepartment()
  }
  
  @IBAction func draftsAction(_ sender: Any) {
    router?.routeToDraftListScene()
  }
  
  @IBAction func sortAction(_ sender: Any) {
    router?.routeToSorttListScene()
  }
  
  @IBAction func logoutAction(_ sender: Any) {
    interactor?.logout()
    router?.routeToAuthScene()
  }
  
//  MARK: Custom
  private func makeDeleteContextualAction(forRowAt indexPath: IndexPath) -> UIContextualAction {
    return UIContextualAction(style: .destructive, title: "Delete") { (action, swipeButtonView, completion) in
      action.image?.withTintColor(.white)
      action.backgroundColor = .red
      let department = self.departments[indexPath.row]
      self.interactor?.setSelectedDepartment(department: department)
      self.interactor?.deleteDepartment()
      self.departments.removeAll()
      self.resultSearchController.isActive = false
      completion(true)
    }
  }

  private func makeEditContextualAction(forRowAt indexPath: IndexPath) -> UIContextualAction {
    return UIContextualAction(style: .normal, title: "Edit") { (action, swipeButtonView, completion) in
      action.image?.withTintColor(.white)
      action.backgroundColor = .orange
      let department = self.departments[indexPath.row]
      self.interactor?.setSelectedDepartment(department: department)
      self.router?.routeToCreateDepartment()
      self.departments.removeAll()
      self.resultSearchController.isActive = false
      completion(true)
    }
  }
}

extension MainViewController: UITableViewDataSource {
  func numberOfSections(in tableView: UITableView) -> Int {
    return 1
  }
  
  func tableView(_ tableView: UITableView, numberOfRowsInSection section: Int) -> Int {
    return departments.count
  }
  
  func tableView(_ tableView: UITableView, cellForRowAt indexPath: IndexPath) -> UITableViewCell {
    let cell = UITableViewCell(style: .subtitle, reuseIdentifier: "cell")
    let department = departments[indexPath.row]
    cell.textLabel?.text = department.name
    cell.detailTextLabel?.text = department.groupName
    return cell
  }
  
  func tableView(_ tableView: UITableView, trailingSwipeActionsConfigurationForRowAt indexPath: IndexPath) -> UISwipeActionsConfiguration? {
    return UISwipeActionsConfiguration(actions: [makeDeleteContextualAction(forRowAt: indexPath),
                                                 makeEditContextualAction(forRowAt: indexPath)])
  }
  
  func tableView(_ tableView: UITableView, willDisplay cell: UITableViewCell, forRowAt indexPath: IndexPath) {
    if indexPath.row == departments.count - 1 && response?.totalElements ?? 0 > departments.count {
      interactor?.getDepartmentList(page: departments.count/Constant.paginateSize, query: "", size: Constant.paginateSize)
    }
  }
}

extension MainViewController: UITableViewDelegate {
  func tableView(_ tableView: UITableView, heightForRowAt indexPath: IndexPath) -> CGFloat {
    return UITableView.automaticDimension
  }
  
  func tableView(_ tableView: UITableView, didSelectRowAt indexPath: IndexPath) {
    tableView.deselectRow(at: indexPath, animated: true)
  }
}

extension MainViewController: UISearchResultsUpdating {
  func updateSearchResults(for searchController: UISearchController) {
    workItem?.cancel()

    let workItem = DispatchWorkItem { [weak self] in
      self?.departments.removeAll()
      self?.interactor?.getDepartmentList(page: 0, query: searchController.searchBar.text ?? "", size: Constant.paginateSize)
    }

    DispatchQueue.main.asyncAfter(deadline: .now() + 1.0, execute: workItem)
    self.workItem = workItem
  }
}
