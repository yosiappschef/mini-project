//
//  CreateProjectInteractor.swift
//  sampleCRUD
//
//  Created by syndromme on 24/10/20.
//  Copyright (c) 2020 ___ORGANIZATIONNAME___. All rights reserved.
//
//  This file was generated by the Clean Swift Xcode Templates so
//  you can apply clean architecture to your iOS and Mac projects,
//  see http://clean-swift.com
//

import UIKit

protocol CreateProjectBusinessLogic
{
  func createNewProject(name: String, amount: Int, startDate: String, endDate: String)
  func updateProject(id: String, name: String, amount: Int, startDate: String, endDate: String)
  func saveAsDraft(name: String?, amount: String?, startDate: String?, endDate: String?)
}

protocol CreateProjectDataStore
{
  var selectedProject: ProjectList.Project? { get set }
  var draftProject: Project? { get set }
}

class CreateProjectInteractor: CreateProjectBusinessLogic, CreateProjectDataStore
{
  var presenter: CreateProjectPresentationLogic?
  var worker: CreateProjectWorker?
  var draftWorker: DraftListWorker?
  var selectedProject: ProjectList.Project?
  var draftProject: Project?
  
  func createNewProject(name: String, amount: Int, startDate: String, endDate: String) {
    let request = CreateProject.Request(amount: amount, name: name, startDate: startDate, endDate: endDate)
    worker = CreateProjectWorker()
    draftWorker = DraftListWorker()
    worker?.doSaveProject(request: request).subscribe(onSuccess: { (result) in
      if self.draftProject != nil {
        self.draftWorker?.doDeleteObject(object: self.draftProject!)
      }
      self.presenter?.presentSuccessCreate(project: result)
    }, onError: { (error) in
      
    }).disposed(by: disposeBag)
  }
  
  func updateProject(id: String, name: String, amount: Int, startDate: String, endDate: String) {
    let request = CreateProject.Request(amount: amount, name: name, startDate: startDate, endDate: endDate)
    worker = CreateProjectWorker()
    worker?.doUpdateProject(id: id, request: request).subscribe(onSuccess: { (result) in
      self.presenter?.presentSuccessUpdate(project: result)
    }, onError: { (error) in
      
    }).disposed(by: disposeBag)
  }
  
  func saveAsDraft(name: String?, amount: String?, startDate: String?, endDate: String?) {
    draftWorker = DraftListWorker()
    let request = Project(name: name, amount: amount, startDate: startDate, endDate: endDate)
    draftWorker?.doObservableChangeset(ofType: Project.self).subscribe(onNext: { (projects, changes) in
      if changes?.inserted.count ?? 0 > 0 {
        self.presenter?.presentSuccessDrafted(project: request)
      }
      if changes?.updated.count ?? 0 > 0 {
        self.presenter?.presentSuccessUpdateDraft(project: request)
      }
    }).disposed(by: disposeBag)
    
    if draftProject == nil {
      draftWorker?.doAddObject(object: request)
    } else {
      draftWorker?.doUpdateObject(ofType: Project.self, oldObject: draftProject!, newObject: request)
    }
  }
}
