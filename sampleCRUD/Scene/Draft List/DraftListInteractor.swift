//
//  DraftListInteractor.swift
//  sampleCRUD
//
//  Created by syndromme on 22/10/20.
//  Copyright (c) 2020 ___ORGANIZATIONNAME___. All rights reserved.
//
//  This file was generated by the Clean Swift Xcode Templates so
//  you can apply clean architecture to your iOS and Mac projects,
//  see http://clean-swift.com
//

import UIKit
import RealmSwift

protocol DraftListBusinessLogic
{
  func getDraftList()
  func deleteDraft(object: Object)
  func setSelectedDepartment(department: Department)
  func setSelectedProject(project: Project)
}

protocol DraftListDataStore
{
  var selectedDepartment: Main.Department? { get set }
  var draftDepartment: Department? { get set }
  var draftType: DraftList.DraftType { get set }
  var selectedProject: ProjectList.Project? { get set }
  var draftProject: Project? { get set }
}

class DraftListInteractor: DraftListBusinessLogic, DraftListDataStore
{
  var presenter: DraftListPresentationLogic?
  var worker: DraftListWorker?
  var selectedDepartment: Main.Department?
  var selectedProject: ProjectList.Project?
  var draftDepartment: Department?
  var draftProject: Project?
  var draftType: DraftList.DraftType = .Department
  
  func getDraftList() {
    worker = DraftListWorker()
    switch draftType {
    case .Department:
      observableDepartment()
      break
    case .Project:
      observableProject()
      break
    default:
      break
    }
  }
  
  func observableDepartment() {
    worker?.doObservable(ofType: Department.self).take(1).subscribe(onNext: { (objects) in
      self.presenter?.presentObjects(objects: objects)
    }).disposed(by: disposeBag)
    
    worker?.doObservableChangeset(ofType: Department.self).subscribe(onNext: { (objects, changes) in
      if changes?.inserted.count ?? 0 > 0 {
        self.presenter?.presentObjects(objects: objects)
      }
      if changes?.updated.count ?? 0 > 0 {
        self.presenter?.presentSuccessUpdate(objects: objects)
      }
      if changes?.deleted.count ?? 0 > 0 {
        self.presenter?.presentSuccessDelete(objects: objects)
      }
    }).disposed(by: disposeBag)
  }
  
  func observableProject() {
    worker?.doObservable(ofType: Project.self).take(1).subscribe(onNext: { (objects) in
      self.presenter?.presentObjects(objects: objects)
    }).disposed(by: disposeBag)
    
    worker?.doObservableChangeset(ofType: Project.self).subscribe(onNext: { (objects, changes) in
      if changes?.inserted.count ?? 0 > 0 {
        self.presenter?.presentObjects(objects: objects)
      }
      if changes?.updated.count ?? 0 > 0 {
        self.presenter?.presentSuccessUpdate(objects: objects)
      }
      if changes?.deleted.count ?? 0 > 0 {
        self.presenter?.presentSuccessDelete(objects: objects)
      }
    }).disposed(by: disposeBag)
  }
  
  func deleteDraft(object: Object) {
    worker = DraftListWorker()
    worker?.doDeleteObject(object: object)
  }
  
  func setSelectedDepartment(department: Department) {
    draftDepartment = department
    selectedDepartment = Main.Department(id: 0, name: department.name ?? "", groupName: department.groupName ?? "", since: department.since ?? "", inTime: department.inTime ?? "", outTime: department.outTime ?? "", created: "", modified: "")
  }
  
  func setSelectedProject(project: Project) {
    draftProject = project
    selectedProject = ProjectList.Project(id: 0, amount: Int(project.amount ?? "") ?? 0, name: project.name ?? "", created: "", modified: "", startDate: project.startDate ?? "", endDate: project.endDate ?? "")
  }
}
