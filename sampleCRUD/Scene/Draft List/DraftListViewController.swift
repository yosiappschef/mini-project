//
//  DraftListViewController.swift
//  sampleCRUD
//
//  Created by syndromme on 22/10/20.
//  Copyright (c) 2020 ___ORGANIZATIONNAME___. All rights reserved.
//
//  This file was generated by the Clean Swift Xcode Templates so
//  you can apply clean architecture to your iOS and Mac projects,
//  see http://clean-swift.com
//

import UIKit
import RealmSwift

protocol DraftListDisplayLogic: class
{
  func displayObjects(objects: [Object])
  func displaySuccessDelete(objects: [Object])
  func displaySuccessUpdate(objects: [Object])
}

class DraftListViewController: UIViewController, DraftListDisplayLogic
{
  var interactor: DraftListBusinessLogic?
  var router: (NSObjectProtocol & DraftListRoutingLogic & DraftListDataPassing)?

  // MARK: Object lifecycle
  
  override init(nibName nibNameOrNil: String?, bundle nibBundleOrNil: Bundle?)
  {
    super.init(nibName: nibNameOrNil, bundle: nibBundleOrNil)
    setup()
  }
  
  required init?(coder aDecoder: NSCoder)
  {
    super.init(coder: aDecoder)
    setup()
  }
  
  // MARK: Setup
  
  private func setup()
  {
    let viewController = self
    let interactor = DraftListInteractor()
    let presenter = DraftListPresenter()
    let router = DraftListRouter()
    viewController.interactor = interactor
    viewController.router = router
    interactor.presenter = presenter
    presenter.viewController = viewController
    router.viewController = viewController
    router.dataStore = interactor
  }
  
  // MARK: Routing
  
  override func prepare(for segue: UIStoryboardSegue, sender: Any?)
  {
    if let scene = segue.identifier {
      let selector = NSSelectorFromString("routeTo\(scene)WithSegue:")
      if let router = router, router.responds(to: selector) {
        router.perform(selector, with: segue)
      }
    }
  }
  
  // MARK: View lifecycle
  @IBOutlet weak var tableView: UITableView!
  
  private var objects: [Object] = []
  private var type: DraftList.DraftType {
    return router?.dataStore?.draftType ?? .Department
  }
  
  override func viewDidLoad()
  {
    super.viewDidLoad()
    title = "DRAFT \(type == .Department ? "DEPARTMENT" : "PROJECT")"
    setupTable()
    interactor?.getDraftList()
  }
  
//  MARK: Setup
  func setupTable() {
    tableView.dataSource = self
    tableView.delegate = self
    tableView.separatorInset = .zero
    tableView.tableFooterView = UIView()
  }

//  MARK: Display
  func displayObjects(objects: [Object]) {
    self.objects = objects
    tableView.reloadData()
  }
  
  func displaySuccessDelete(objects: [Object]) {
    self.objects = objects
    tableView.reloadData()
    showAlert(title: "\(type == .Department ? "Department" : "Project")", message: "Your \(type == .Department ? "Department" : "Project") has been deleted from draft.")
  }
  
  func displaySuccessUpdate(objects: [Object]) {
    self.objects = objects
    tableView.reloadData()
  }
  
//  MARK: Custom
  private func makeDeleteContextualAction(forRowAt indexPath: IndexPath) -> UIContextualAction {
    return UIContextualAction(style: .destructive, title: "Delete") { (action, swipeButtonView, completion) in
      action.image?.withTintColor(.white)
      action.backgroundColor = .red
      let object = self.objects[indexPath.row]
      switch self.router?.dataStore?.draftType {
      case .Department:
        let department = object as! Department
        self.interactor?.setSelectedDepartment(department: department)
        break
      case .Project:
        let project = object as! Project
        self.interactor?.setSelectedProject(project: project)
        break
      default:
        break
      }
      self.interactor?.deleteDraft(object: object)
      completion(true)
    }
  }

  private func makeEditContextualAction(forRowAt indexPath: IndexPath) -> UIContextualAction {
    return UIContextualAction(style: .normal, title: "Edit") { (action, swipeButtonView, completion) in
      action.image?.withTintColor(.white)
      action.backgroundColor = .orange
      let object = self.objects[indexPath.row]
      switch self.router?.dataStore?.draftType {
      case .Department:
        let department = object as! Department
        self.interactor?.setSelectedDepartment(department: department)
        self.router?.routeToCreateDepartment()
        break
      case .Project:
        let project = object as! Project
        self.interactor?.setSelectedProject(project: project)
        self.router?.routeToCreateProject()
        break
      default:
        break
      }
      completion(true)
    }
  }
}

extension DraftListViewController: UITableViewDataSource {
  func numberOfSections(in tableView: UITableView) -> Int {
    return 1
  }
  
  func tableView(_ tableView: UITableView, numberOfRowsInSection section: Int) -> Int {
    return objects.count
  }
  
  func tableView(_ tableView: UITableView, cellForRowAt indexPath: IndexPath) -> UITableViewCell {
    let cell = UITableViewCell(style: .subtitle, reuseIdentifier: "cell")
    let object = objects[indexPath.row]
    var title = ""
    var subtitle = ""
    switch router?.dataStore?.draftType {
    case .Department:
      let department = object as! Department
      title = department.name ?? ""
      subtitle = department.groupName  ?? ""
      break
    case .Project:
      let project = object as! Project
      title = project.name  ?? ""
      subtitle = project.amount ?? ""
      break
    default:
      break
    }
    cell.textLabel?.text = title
    cell.detailTextLabel?.text = subtitle
    return cell
  }
  
  func tableView(_ tableView: UITableView, trailingSwipeActionsConfigurationForRowAt indexPath: IndexPath) -> UISwipeActionsConfiguration? {
    return UISwipeActionsConfiguration(actions: [makeDeleteContextualAction(forRowAt: indexPath),
                                                 makeEditContextualAction(forRowAt: indexPath)])
  }
}

extension DraftListViewController: UITableViewDelegate {
  func tableView(_ tableView: UITableView, heightForRowAt indexPath: IndexPath) -> CGFloat {
    return UITableView.automaticDimension
  }
  
  func tableView(_ tableView: UITableView, didSelectRowAt indexPath: IndexPath) {
    tableView.deselectRow(at: indexPath, animated: true)
  }
}
